generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Notify {
  id        Int      @id @default(autoincrement())
  email     String   @db.VarChar(100)
  createdAt DateTime @default(now())
}

model User {
  id       String @id @default(uuid())
  name     String @unique @db.VarChar(100)
  role     Role   @default(USER)
  email    String @unique @db.VarChar(100)
  college  String @db.VarChar(100)
  phone    String @db.VarChar(10) @default("")
  password String
  Team     Team[]
}

model Event {
  eventId           String     @id @default(uuid())
  rules             String?    @db.LongText
  dateTo            String
  dateFrom          String
  category          Categories @default(MALE)
  winnerPrize       Int
  winningTeamPrize  Int
  runnerUpTeamPrize Int
  runnerUpPrize     Int
  minPlayers        Int
  maxPlayers        Int
  pricePerPlayer    Int
  venue             String
  location          Locations  @default(INDOOR)
  eventName         String     @db.VarChar(100)
  Team              Team[]
}

model TeamMember {
  id         Int        @id @default(autoincrement())
  teamId     String
  name       String     @db.VarChar(100)
  email      String     @db.VarChar(100)
  phone      String     @db.VarChar(100)
  rollNumber String     @db.VarChar(100)
  eventId    String
  Team       Team       @relation(fields: [teamId], references: [teamId])
  createdAt  DateTime   @default(now())
  playerType PlayerType @default(PLAYER)
}

model Team {
  teamId         String           @id
  registeredById String
  registeredBy   User             @relation(fields: [registeredById], references: [id])
  eventId        String
  Event          Event            @relation(fields: [eventId], references: [eventId])
  paymentStatus  PaymentStatus    @default(NOT_PAID)
  TeamMembers    TeamMember[]
  PaymentDetails PaymentDetails[]
}

model PaymentDetails {
  id            Int      @id @default(autoincrement())
  teamId        String   @unique
  paymentId     String
  playerOrderId String
  amount        Int
  Team          Team     @relation(fields: [teamId], references: [teamId])
  createdAt     DateTime @default(now())
}

enum PaymentStatus {
  PAID
  NOT_PAID
  MANUAL
  PENDING
}

enum PlayerType {
  CAPTAIN
  PLAYER
  ADDITIONAL
}

enum Role {
  USER
  ADMIN
  ADMIN_SUPER
}

enum Categories {
  MALE
  FEMALE
  MIXED
}

enum Locations {
  INDOOR
  OUTDOOR
}
